@using ContractAndProjectManager.Entities
@using ContractAndProjectManager.Data
@using ContractAndProjectManager.Helpers
@using ContractAndProjectManager.Models
@using System.Globalization
@using ContractAndProjectManager.Services
@model ContractAndProjectManager.Entities.Project
@inject ApplicationContext DbContext;
@inject UserService UserService;

@section Head {
    <script src="https://kit.fontawesome.com/94c3a80a95.js" crossorigin="anonymous"></script>
}

@{
    ViewData["roleId"] = UserService.User.RoleId;
    
    var currentYear = DateTime.Today.Year;
    var projectStatuses = SelectListHelpers.CreateSelectList(ProjectStatus.All, x => new SelectListModel
    {
        Id = x.Id,
        Title = x.Name
    }, Model.Status?.StatusId ?? 0);

    var startDate = Model.Contract.Stages.Where(x => x.DateStart != null).Min(x => x.DateStart) ?? Model.DateStart ?? Model.Contract.DateStart ?? DateTime.Now;
    var endDate = Model.Contract.Stages.Where(x => x.DateDeadLine != null).Max(x => x.DateDeadLine) ?? Model.DateDeadLine ?? Model.Contract.DateDeadLine ?? DateTime.Now.Add(TimeSpan.FromDays(31));

    var completeNames = (endDate - startDate).TotalDays / 31 <= 3;
    var months = new List<MonthModel>();
    var mn = startDate.Month;
    var year = startDate.Year;
    var daysComplete = 0;
    while (true)
    {
        var daysInMonth = DateTime.DaysInMonth(year, mn);
        daysComplete += daysInMonth;
        months.Add(new MonthModel { Name = DateHelpers.GetNameFromMonthNumber(mn, completeNames) + (currentYear == year ? "" : $" '{year.ToString().TakeLast(2).Aggregate("", (acc, x) => acc + x)}"), Date = new DateTime(year, mn, 1), Days = daysInMonth, DaysStartOverall = daysComplete - daysInMonth, DaysEndOverall = daysComplete - 1 });
        mn = mn == 12 ? 1 : mn + 1;
        if (mn == 1)
        {
            year++;
        }
        if (mn == (endDate.Month == 12 ? 0 : endDate.Month) + 1 && year == endDate.Year)
        {
            break;
        }
    }

    var splits = new Dictionary<int, Dictionary<string, List<double>>>();
    foreach (var stage in Model.Stages)
    {
        splits[stage.Id] = new Dictionary<string, List<double>>();

        if (stage.DateStart == null && stage.DateEnd == null)
        {
            splits[stage.Id] = null;
            continue;
        }

        var daysAtStart = (stage.DateStart.Value - new DateTime(startDate.Year, startDate.Month, 1).Date).Days;
        var daysAtEnd = (stage.DateDeadLine.Value - new DateTime(startDate.Year, startDate.Month, 1).Date).Days + 1;

        foreach (var month in months)
        {
            if (daysAtStart > month.DaysEndOverall || daysAtEnd < month.DaysStartOverall)
            {
                splits[stage.Id].Add(month.Key, null);
            }
            else
            {
                var first = daysAtStart < month.DaysStartOverall ? 0 : (((double) daysAtStart - month.DaysStartOverall) / month.Days) * 100;
                var last = daysAtEnd > month.DaysEndOverall ? 100 : (((double) daysAtEnd - month.DaysStartOverall) / month.Days) * 100;
                splits[stage.Id].Add(month.Key, new List<double> { first, last });
            }
        }
    }
}

<div class="mb-3">
    <div class="d-flex justify-content-between align-items-start mb-4" style="font-size: 14px">
        <div >
            <div class="d-flex">
                <a asp-action="Index" class="text m-0">Мои проекты</a>
                <p class="text m-0 mx-2">/</p>
                <p class="text m-0" style="font-weight: 500">@Model.Name</p>
            </div>
            @if (Model.Description != null)
            {
                <p class="text-sm">@Model.Description</p>
            }
        </div>
        <div class="d-flex flex-column align-items-end">
            <p class="text-sm">Дата начала: @DateHelpers.DateFormat(Model.DateStart ?? Model.DateCreated, true)</p>
            @if (Model.DateDeadLine != null)
            {
                <p class="text-sm">Дата окончания: @DateHelpers.DateFormat(Model.DateDeadLine.Value, true)</p>
            }
        </div>
    </div>
    <div class="d-flex justify-content-between align-items-center">
        <h4>Дорожная карта</h4>
        <form asp-area="Project" asp-controller="Project" asp-action="SetStatus">
            <input hidden name="projectId" value="@Model.Id"/>
            <input hidden name="returnToHome" value="true"/>
            <select onchange="this.form.submit()" style="border-color: @Model.Status?.Status.Color" name="statusId" class="custom-select" asp-items="projectStatuses"></select>
        </form>
    </div>
</div>

<div class="project-map">
    @foreach (var item in Model.Contract.Stages)
    {
        var key = "cs" + item.Id;
        <div class="info-card p-3" info-id="@key" style="display: none">
            @await Html.PartialAsync("_ContractStageInfo", item)
        </div>
    }

    @foreach (var item in Model.Stages)
    {
        var key = "ps" + item.Id;
        <div class="info-card p-3" info-id="@key" style="display: none">
            @await Html.PartialAsync("_ProjectStageInfo", item)
        </div>
    }

    @foreach (var item in Model.Stages.SelectMany(x => x.Tasks))
    {
        var key = "tsk" + item.Id;
        <div class="info-card p-3" info-id="@key" style="display: none">
            @await Html.PartialAsync("_TaskInfo", item)
        </div>
    }

    <div class="project-map__line">
        <div class="project-map__header p-border-right-bold">Этапы</div>
        <div class="project-map__calendar">
            @foreach (var item in months)
            {
                <div class="project-map__header  @(item.Name == months.Last().Name ? "" : "p-border-right")" style="@(completeNames ? "justify-content: center" : "")">
                    @item.Name
                </div>
            }
        </div>
    </div>
    @foreach (var contractStage in Model.Contract.Stages)
    {
        var daysAtStart = (contractStage.DateStart - new DateTime(startDate.Year, startDate.Month, 1).Date)?.Days ?? null;
        var daysAtEnd = (contractStage.DateDeadLine - new DateTime(startDate.Year, startDate.Month, 1).Date)?.Days + 1 ?? null;

        <div class="project-map__line">
            <div class="contract-stage p-border-right-bold project-map__line__sub p-border-bottom">
                <div onclick="toggleInfoCard('@("cs" + contractStage.Id)')" onmouseenter="toggleLineSelected('@contractStage.Key', true)" onmouseleave="toggleLineSelected('@contractStage.Key', false)" p-line-id="@contractStage.Key" class="contract-stage__title p-2 p-line">
                    @contractStage.Title
                </div>
                @foreach (var projectStage in contractStage.ProjectStages)
                {
                    <div onclick="toggleInfoCard('@("ps" + projectStage.Id)')" onmouseenter="toggleLineSelected('@projectStage.Key', true)" onmouseleave="toggleLineSelected('@projectStage.Key', false)" p-line-id="@projectStage.Key"
                         class="p-line project-stage p-2">
                        <span >@projectStage.Title</span>
                    </div>
                }
            </div>
            <div class="project-map__calendar">
                @if (daysAtStart != null && daysAtEnd != null)
                {
                    var firstP = ((double) daysAtStart / daysComplete) * 100;
                    var lastP = ((double) daysAtEnd / daysComplete) * 100;

                    <div onclick="toggleInfoCard('@("cs" + contractStage.Id)')" class="m-1 project-map__calendar__contract-stage-bar--in"
                         style="left: @firstP.ToString("0.000", CultureInfo.InvariantCulture)%; 
                         right: @((100 - lastP).ToString("0.000", CultureInfo.InvariantCulture))%">
                        <div class="d-flex justify-content-between">
                            <p class="contract-stage-bar__date m-1">
                                @DateHelpers.DateFormat(contractStage.DateStart.Value, true)
                            </p>
                            <p class="contract-stage-bar__date m-1">
                                @DateHelpers.DateFormat(contractStage.DateDeadLine.Value, true)
                            </p>
                        </div>
                    </div>
                }

                @foreach (var month in months)
                {
                    var isLastMonth = month.Name == months.Last().Name;
                    var isFirstMonth = month.Name == months.First().Name;

                    <div class="project-map__line__sub p-border-bottom @(isLastMonth ? "" : "p-border-right")">
                        <div onmouseenter="toggleLineSelected('@contractStage.Key', true)" onmouseleave="toggleLineSelected('@contractStage.Key', false)" p-line-id="@contractStage.Key" class="contract-stage__title p-2 p-line"></div>
                        @foreach (var projectStage in contractStage.ProjectStages)
                        {
                            var split = splits[projectStage.Id]?[month.Key];

                            <div onmouseenter="toggleLineSelected('@projectStage.Key', true)" onmouseleave="toggleLineSelected('@projectStage.Key', false)" p-line-id="@projectStage.Key"
                                 class="p-line d-flex project-stage py-2 @(isLastMonth ? "pr-1" : "") @(isFirstMonth ? "pl-1" : "")">
                                @if (split != null)
                                {
                                    var fromPreviousMonth = split.First() == 0;
                                    var toNextMonth = Math.Abs(split.Last() - 100) < 0.01;
                                    var inPercent = split.Last() - split.First();
                                    @if (!fromPreviousMonth)
                                    {
                                        <div class="project-stage-bar"
                                             style="width: @split.First().ToString("0.000", CultureInfo.InvariantCulture)%">
                                        </div>
                                    }
                                    <div onclick="toggleInfoCard('@("ps" + projectStage.Id)')" onmouseleave="toggleBarSelected('@projectStage.Id', false)" onmouseenter="toggleBarSelected('@projectStage.Id', true)" bar-id="@projectStage.Id" class="d-flex justify-content-between project-stage-bar project-stage-bar__in  @(toNextMonth && !isLastMonth ? "no-right-border-radius" : "") @(fromPreviousMonth && !isFirstMonth ? "no-left-border-radius" : "")" style="width: @inPercent.ToString("0.000", CultureInfo.InvariantCulture)%">
                                        @if (!fromPreviousMonth || isFirstMonth)
                                        {
                                            <div class="project_stage-bar__date-mark m-1"></div>
                                            <p class="project-stage-bar__date m-0"
                                               style="left: -80px;">
                                                @DateHelpers.DateFormat(projectStage.DateStart.Value, true)
                                            </p>
                                        }
                                        else
                                        {
                                            <div></div>
                                        }
                                        @if (!toNextMonth || isLastMonth)
                                        {
                                            <div class="project_stage-bar__date-mark m-1"></div>
                                            <p class="project-stage-bar__date m-0"
                                               style="right: -80px">
                                                @DateHelpers.DateFormat(projectStage.DateDeadLine.Value, true)
                                            </p>
                                        }
                                        else
                                        {
                                            <div></div>
                                        }
                                    </div>
                                    @if (!toNextMonth)
                                    {
                                        <div class="project-stage-bar" style="width: @((100 - split.Last()).ToString("0.000", CultureInfo.InvariantCulture))%"></div>
                                    }
                                }

                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    }
    <div class="project-map__line h-100">
        <div class="p-border-right-bold"></div>
        <div></div>
    </div>
</div>


<script>
 function toggleBarSelected(key, v) {
     let els = document.querySelectorAll(`[bar-id='${key}']`)
     els.forEach((e) => {
         if (v)
            e.classList.add('project-stage-bar__in--selected');
         else e.classList.remove('project-stage-bar__in--selected');
     })
 }
 
 function toggleLineSelected(key, v) {
     let els = document.querySelectorAll(`[p-line-id='${key}']`)
          els.forEach((e) => {
              if (v)
                 e.classList.add('p-line--selected');
              else e.classList.remove('p-line--selected');
          })
 }
 
 function toggleBarAndLine(barKey, lineKey, v) {
     toggleLineSelected(lineKey, v)
     toggleBarSelected(barKey, v)
 }
 
 function toggleInfoCard(key) {
     let els = document.querySelectorAll(`[info-id]`)
     els.forEach((e) => {
         if (key === undefined)
             e.style.display = 'none'
         else {
             if (e.attributes['info-id'].value === key)
                 e.style.display = 'block'
             else e.style.display = 'none'
         }   
     })
 }
</script>

<style>
    .navbar {
        padding: 0;
        margin: 0 !important;
    }
    .container {
        max-width: 100%;
        height: 100%;
        padding: var(--indent-3);
    }
    
    
    .navbar > .container {
        padding-top: var(--indent-1);
        padding-bottom: var(--indent-1);
    }
    
    body {
        height: 100vh;
        overflow: hidden;
    }
    
    body, html {
        margin: 0;
        padding: 0;
    }
    
    footer {
        display: none;
    }
    
    main {
        height: 100%;
    }
   
</style>